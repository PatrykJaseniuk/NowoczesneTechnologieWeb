import Head from 'next/head'
import Image from 'next/image'
import styles from '../styles/Home.module.css'
import { useState, useEffect } from 'react'
import { getProducts } from './api/products'

export default function Home() {
  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        {/* import bootstrap */}
        <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.0/css/bootstrap.min.css" integrity="sha384-9aIt2nRpC12Uk9gS9baDl411NQApFmC26EwAOH8WgZl5MYYxFfc+NcPb1dKGj7Sk" crossorigin="anonymous" />
      </Head>
      <Table/>
    </div>
  )
}

function Table() {

  const [products, setProducts] = useState(null);
  const [error, setError] = useState(null);
  const filterAndSort = function ({ filterBy, where, sortBy, order }) {
    getProducts({ filterBy, where, sortBy, order })
      .then(data => setProducts(data))
      .catch(reason => setError(reason));
      console.log(filterBy, where, sortBy, order);
  }
  // load data from API
  useEffect(() => {
    getProducts({})
      .then(data => setProducts(data))
      .catch(reason => setError(reason))
  }, []);


  if (error) {
    console.log(error);
  }
  if (!products) {
    return (<p>loading</p>)
  }
  return (
    <div className="container">
      {/* bootstrap table */}
      <div className="table-responsive">
        <table className="table table-striped">
          <Naglowek
          filterAndSort = {filterAndSort}
            kolumny={products.kolumny}
          />
          <Wiersze
            wiersze={products.wiersze}
          />
        </table>
      </div>
    </div>
  )
}

function Naglowek({ kolumny, filterAndSort }) {
  return (
    <thead>
      <tr>
        {kolumny.map(kolumna => (
          <th key={kolumna}>{
            <input
            onKeyUp={(event)=>{
              console.log(event.target.value);
              filterAndSort({filterBy:kolumna,where:event.target.value})
            }}
            />
          }</th>
        ))}
      </tr>
      <tr>
        {kolumny.map(kolumna => (
          <th key={kolumna}>{kolumna}</th>
        ))}
      </tr>
    </thead>
  )
}

function Wiersze({ wiersze }) {
  return (
    <tbody>
      {wiersze.map(wiersz => (
        <tr key={wiersz.id}>
          {wiersz.komorki.map(komorka => (
            <td key={komorka}>{komorka}</td>
          ))}
        </tr>
      ))}
    </tbody>
  )
}
